# source: https://eu1.prisma.sh/anthony-ho-b91ea0/spontane/dev
# timestamp: Sun Jun 28 2020 13:40:39 GMT+0100 (British Summer Time)

type AggregateGeoLocation {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateMarker {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateShape {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type GeoLocation implements Node {
  id: ID!
  latitude: Float!
  longitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type GeoLocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeoLocationEdge]!
  aggregate: AggregateGeoLocation!
}

input GeoLocationCreateInput {
  id: ID
  latitude: Float!
  longitude: Float!
}

input GeoLocationCreateOneInput {
  create: GeoLocationCreateInput
  connect: GeoLocationWhereUniqueInput
}

"""An edge in a connection."""
type GeoLocationEdge {
  """The item at the end of the edge."""
  node: GeoLocation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GeoLocationOrderByInput {
  id_ASC
  id_DESC
  latitude_ASC
  latitude_DESC
  longitude_ASC
  longitude_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GeoLocationPreviousValues {
  id: ID!
  latitude: Float!
  longitude: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GeoLocationSubscriptionPayload {
  mutation: MutationType!
  node: GeoLocation
  updatedFields: [String!]
  previousValues: GeoLocationPreviousValues
}

input GeoLocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoLocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoLocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoLocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GeoLocationWhereInput
}

input GeoLocationUpdateDataInput {
  latitude: Float
  longitude: Float
}

input GeoLocationUpdateInput {
  latitude: Float
  longitude: Float
}

input GeoLocationUpdateManyMutationInput {
  latitude: Float
  longitude: Float
}

input GeoLocationUpdateOneRequiredInput {
  create: GeoLocationCreateInput
  connect: GeoLocationWhereUniqueInput
  update: GeoLocationUpdateDataInput
  upsert: GeoLocationUpsertNestedInput
}

input GeoLocationUpsertNestedInput {
  update: GeoLocationUpdateDataInput!
  create: GeoLocationCreateInput!
}

input GeoLocationWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoLocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoLocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoLocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  latitude: Float

  """All values that are not equal to given value."""
  latitude_not: Float

  """All values that are contained in given list."""
  latitude_in: [Float!]

  """All values that are not contained in given list."""
  latitude_not_in: [Float!]

  """All values less than the given value."""
  latitude_lt: Float

  """All values less than or equal the given value."""
  latitude_lte: Float

  """All values greater than the given value."""
  latitude_gt: Float

  """All values greater than or equal the given value."""
  latitude_gte: Float
  longitude: Float

  """All values that are not equal to given value."""
  longitude_not: Float

  """All values that are contained in given list."""
  longitude_in: [Float!]

  """All values that are not contained in given list."""
  longitude_not_in: [Float!]

  """All values less than the given value."""
  longitude_lt: Float

  """All values less than or equal the given value."""
  longitude_lte: Float

  """All values greater than the given value."""
  longitude_gt: Float

  """All values greater than or equal the given value."""
  longitude_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input GeoLocationWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  country: String!
  city: String!
  geoLocation: GeoLocation!
  markerType: Marker!
  description: String
  user: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  country: String!
  city: String!
  description: String
  user: String
  geoLocation: GeoLocationCreateOneInput!
  markerType: MarkerCreateOneInput!
}

input LocationCreateManyInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  country_ASC
  country_DESC
  city_ASC
  city_DESC
  description_ASC
  description_DESC
  user_ASC
  user_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LocationPreviousValues {
  id: ID!
  country: String!
  city: String!
  description: String
  user: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LocationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  user: String

  """All values that are not equal to given value."""
  user_not: String

  """All values that are contained in given list."""
  user_in: [String!]

  """All values that are not contained in given list."""
  user_not_in: [String!]

  """All values less than the given value."""
  user_lt: String

  """All values less than or equal the given value."""
  user_lte: String

  """All values greater than the given value."""
  user_gt: String

  """All values greater than or equal the given value."""
  user_gte: String

  """All values containing the given string."""
  user_contains: String

  """All values not containing the given string."""
  user_not_contains: String

  """All values starting with the given string."""
  user_starts_with: String

  """All values not starting with the given string."""
  user_not_starts_with: String

  """All values ending with the given string."""
  user_ends_with: String

  """All values not ending with the given string."""
  user_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateDataInput {
  country: String
  city: String
  description: String
  user: String
  geoLocation: GeoLocationUpdateOneRequiredInput
  markerType: MarkerUpdateOneRequiredInput
}

input LocationUpdateInput {
  country: String
  city: String
  description: String
  user: String
  geoLocation: GeoLocationUpdateOneRequiredInput
  markerType: MarkerUpdateOneRequiredInput
}

input LocationUpdateManyDataInput {
  country: String
  city: String
  description: String
  user: String
}

input LocationUpdateManyInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  delete: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueNestedInput!]
  updateMany: [LocationUpdateManyWithWhereNestedInput!]
  deleteMany: [LocationScalarWhereInput!]
  upsert: [LocationUpsertWithWhereUniqueNestedInput!]
}

input LocationUpdateManyMutationInput {
  country: String
  city: String
  description: String
  user: String
}

input LocationUpdateManyWithWhereNestedInput {
  where: LocationScalarWhereInput!
  data: LocationUpdateManyDataInput!
}

input LocationUpdateWithWhereUniqueNestedInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateDataInput!
}

input LocationUpsertWithWhereUniqueNestedInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateDataInput!
  create: LocationCreateInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  user: String

  """All values that are not equal to given value."""
  user_not: String

  """All values that are contained in given list."""
  user_in: [String!]

  """All values that are not contained in given list."""
  user_not_in: [String!]

  """All values less than the given value."""
  user_lt: String

  """All values less than or equal the given value."""
  user_lte: String

  """All values greater than the given value."""
  user_gt: String

  """All values greater than or equal the given value."""
  user_gte: String

  """All values containing the given string."""
  user_contains: String

  """All values not containing the given string."""
  user_not_contains: String

  """All values starting with the given string."""
  user_starts_with: String

  """All values not starting with the given string."""
  user_not_starts_with: String

  """All values ending with the given string."""
  user_ends_with: String

  """All values not ending with the given string."""
  user_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  geoLocation: GeoLocationWhereInput
  markerType: MarkerWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Marker implements Node {
  id: ID!
  type: String!
  pinColor: String!
}

"""A connection to a list of items."""
type MarkerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MarkerEdge]!
  aggregate: AggregateMarker!
}

input MarkerCreateInput {
  id: ID
  type: String!
  pinColor: String!
}

input MarkerCreateOneInput {
  create: MarkerCreateInput
  connect: MarkerWhereUniqueInput
}

"""An edge in a connection."""
type MarkerEdge {
  """The item at the end of the edge."""
  node: Marker!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MarkerOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  pinColor_ASC
  pinColor_DESC
}

type MarkerPreviousValues {
  id: ID!
  type: String!
  pinColor: String!
}

type MarkerSubscriptionPayload {
  mutation: MutationType!
  node: Marker
  updatedFields: [String!]
  previousValues: MarkerPreviousValues
}

input MarkerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MarkerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MarkerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MarkerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MarkerWhereInput
}

input MarkerUpdateDataInput {
  type: String
  pinColor: String
}

input MarkerUpdateInput {
  type: String
  pinColor: String
}

input MarkerUpdateManyMutationInput {
  type: String
  pinColor: String
}

input MarkerUpdateOneRequiredInput {
  create: MarkerCreateInput
  connect: MarkerWhereUniqueInput
  update: MarkerUpdateDataInput
  upsert: MarkerUpsertNestedInput
}

input MarkerUpsertNestedInput {
  update: MarkerUpdateDataInput!
  create: MarkerCreateInput!
}

input MarkerWhereInput {
  """Logical AND on all given filters."""
  AND: [MarkerWhereInput!]

  """Logical OR on all given filters."""
  OR: [MarkerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MarkerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  pinColor: String

  """All values that are not equal to given value."""
  pinColor_not: String

  """All values that are contained in given list."""
  pinColor_in: [String!]

  """All values that are not contained in given list."""
  pinColor_not_in: [String!]

  """All values less than the given value."""
  pinColor_lt: String

  """All values less than or equal the given value."""
  pinColor_lte: String

  """All values greater than the given value."""
  pinColor_gt: String

  """All values greater than or equal the given value."""
  pinColor_gte: String

  """All values containing the given string."""
  pinColor_contains: String

  """All values not containing the given string."""
  pinColor_not_contains: String

  """All values starting with the given string."""
  pinColor_starts_with: String

  """All values not starting with the given string."""
  pinColor_not_starts_with: String

  """All values ending with the given string."""
  pinColor_ends_with: String

  """All values not ending with the given string."""
  pinColor_not_ends_with: String
}

input MarkerWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  createMarker(data: MarkerCreateInput!): Marker!
  createShape(data: ShapeCreateInput!): Shape!
  createLocation(data: LocationCreateInput!): Location!
  createGeoLocation(data: GeoLocationCreateInput!): GeoLocation!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateMarker(data: MarkerUpdateInput!, where: MarkerWhereUniqueInput!): Marker
  updateShape(data: ShapeUpdateInput!, where: ShapeWhereUniqueInput!): Shape
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateGeoLocation(data: GeoLocationUpdateInput!, where: GeoLocationWhereUniqueInput!): GeoLocation
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteMarker(where: MarkerWhereUniqueInput!): Marker
  deleteShape(where: ShapeWhereUniqueInput!): Shape
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteGeoLocation(where: GeoLocationWhereUniqueInput!): GeoLocation
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertMarker(where: MarkerWhereUniqueInput!, create: MarkerCreateInput!, update: MarkerUpdateInput!): Marker!
  upsertShape(where: ShapeWhereUniqueInput!, create: ShapeCreateInput!, update: ShapeUpdateInput!): Shape!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertGeoLocation(where: GeoLocationWhereUniqueInput!, create: GeoLocationCreateInput!, update: GeoLocationUpdateInput!): GeoLocation!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyMarkers(data: MarkerUpdateManyMutationInput!, where: MarkerWhereInput): BatchPayload!
  updateManyShapes(data: ShapeUpdateManyMutationInput!, where: ShapeWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  updateManyGeoLocations(data: GeoLocationUpdateManyMutationInput!, where: GeoLocationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyMarkers(where: MarkerWhereInput): BatchPayload!
  deleteManyShapes(where: ShapeWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyGeoLocations(where: GeoLocationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  LOCATIONCREATE
  LOCATIONUPDATE
  LOCATIONDELETE
  PERMISSIONUPDATE
}

type Project implements Node {
  id: ID!
  title: String!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
  shapes(where: ShapeWhereInput, orderBy: ShapeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shape!]
  mapBounds: String
  mapStyle: String
  markerColor: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  id: ID
  title: String!
  mapBounds: String
  mapStyle: String
  markerColor: String
  locations: LocationCreateManyInput
  shapes: ShapeCreateManyInput
  user: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutUserInput {
  create: [ProjectCreateWithoutUserInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutUserInput {
  id: ID
  title: String!
  mapBounds: String
  mapStyle: String
  markerColor: String
  locations: LocationCreateManyInput
  shapes: ShapeCreateManyInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  mapBounds_ASC
  mapBounds_DESC
  mapStyle_ASC
  mapStyle_DESC
  markerColor_ASC
  markerColor_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  mapBounds: String
  mapStyle: String
  markerColor: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ProjectScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  mapBounds: String

  """All values that are not equal to given value."""
  mapBounds_not: String

  """All values that are contained in given list."""
  mapBounds_in: [String!]

  """All values that are not contained in given list."""
  mapBounds_not_in: [String!]

  """All values less than the given value."""
  mapBounds_lt: String

  """All values less than or equal the given value."""
  mapBounds_lte: String

  """All values greater than the given value."""
  mapBounds_gt: String

  """All values greater than or equal the given value."""
  mapBounds_gte: String

  """All values containing the given string."""
  mapBounds_contains: String

  """All values not containing the given string."""
  mapBounds_not_contains: String

  """All values starting with the given string."""
  mapBounds_starts_with: String

  """All values not starting with the given string."""
  mapBounds_not_starts_with: String

  """All values ending with the given string."""
  mapBounds_ends_with: String

  """All values not ending with the given string."""
  mapBounds_not_ends_with: String
  mapStyle: String

  """All values that are not equal to given value."""
  mapStyle_not: String

  """All values that are contained in given list."""
  mapStyle_in: [String!]

  """All values that are not contained in given list."""
  mapStyle_not_in: [String!]

  """All values less than the given value."""
  mapStyle_lt: String

  """All values less than or equal the given value."""
  mapStyle_lte: String

  """All values greater than the given value."""
  mapStyle_gt: String

  """All values greater than or equal the given value."""
  mapStyle_gte: String

  """All values containing the given string."""
  mapStyle_contains: String

  """All values not containing the given string."""
  mapStyle_not_contains: String

  """All values starting with the given string."""
  mapStyle_starts_with: String

  """All values not starting with the given string."""
  mapStyle_not_starts_with: String

  """All values ending with the given string."""
  mapStyle_ends_with: String

  """All values not ending with the given string."""
  mapStyle_not_ends_with: String
  markerColor: String

  """All values that are not equal to given value."""
  markerColor_not: String

  """All values that are contained in given list."""
  markerColor_in: [String!]

  """All values that are not contained in given list."""
  markerColor_not_in: [String!]

  """All values less than the given value."""
  markerColor_lt: String

  """All values less than or equal the given value."""
  markerColor_lte: String

  """All values greater than the given value."""
  markerColor_gt: String

  """All values greater than or equal the given value."""
  markerColor_gte: String

  """All values containing the given string."""
  markerColor_contains: String

  """All values not containing the given string."""
  markerColor_not_contains: String

  """All values starting with the given string."""
  markerColor_starts_with: String

  """All values not starting with the given string."""
  markerColor_not_starts_with: String

  """All values ending with the given string."""
  markerColor_ends_with: String

  """All values not ending with the given string."""
  markerColor_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  mapBounds: String
  mapStyle: String
  markerColor: String
  locations: LocationUpdateManyInput
  shapes: ShapeUpdateManyInput
  user: UserUpdateOneRequiredWithoutProjectsInput
}

input ProjectUpdateManyDataInput {
  title: String
  mapBounds: String
  mapStyle: String
  markerColor: String
}

input ProjectUpdateManyMutationInput {
  title: String
  mapBounds: String
  mapStyle: String
  markerColor: String
}

input ProjectUpdateManyWithoutUserInput {
  create: [ProjectCreateWithoutUserInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  deleteMany: [ProjectScalarWhereInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUserInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutUserDataInput {
  title: String
  mapBounds: String
  mapStyle: String
  markerColor: String
  locations: LocationUpdateManyInput
  shapes: ShapeUpdateManyInput
}

input ProjectUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutUserDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutUserDataInput!
  create: ProjectCreateWithoutUserInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  mapBounds: String

  """All values that are not equal to given value."""
  mapBounds_not: String

  """All values that are contained in given list."""
  mapBounds_in: [String!]

  """All values that are not contained in given list."""
  mapBounds_not_in: [String!]

  """All values less than the given value."""
  mapBounds_lt: String

  """All values less than or equal the given value."""
  mapBounds_lte: String

  """All values greater than the given value."""
  mapBounds_gt: String

  """All values greater than or equal the given value."""
  mapBounds_gte: String

  """All values containing the given string."""
  mapBounds_contains: String

  """All values not containing the given string."""
  mapBounds_not_contains: String

  """All values starting with the given string."""
  mapBounds_starts_with: String

  """All values not starting with the given string."""
  mapBounds_not_starts_with: String

  """All values ending with the given string."""
  mapBounds_ends_with: String

  """All values not ending with the given string."""
  mapBounds_not_ends_with: String
  mapStyle: String

  """All values that are not equal to given value."""
  mapStyle_not: String

  """All values that are contained in given list."""
  mapStyle_in: [String!]

  """All values that are not contained in given list."""
  mapStyle_not_in: [String!]

  """All values less than the given value."""
  mapStyle_lt: String

  """All values less than or equal the given value."""
  mapStyle_lte: String

  """All values greater than the given value."""
  mapStyle_gt: String

  """All values greater than or equal the given value."""
  mapStyle_gte: String

  """All values containing the given string."""
  mapStyle_contains: String

  """All values not containing the given string."""
  mapStyle_not_contains: String

  """All values starting with the given string."""
  mapStyle_starts_with: String

  """All values not starting with the given string."""
  mapStyle_not_starts_with: String

  """All values ending with the given string."""
  mapStyle_ends_with: String

  """All values not ending with the given string."""
  mapStyle_not_ends_with: String
  markerColor: String

  """All values that are not equal to given value."""
  markerColor_not: String

  """All values that are contained in given list."""
  markerColor_in: [String!]

  """All values that are not contained in given list."""
  markerColor_not_in: [String!]

  """All values less than the given value."""
  markerColor_lt: String

  """All values less than or equal the given value."""
  markerColor_lte: String

  """All values greater than the given value."""
  markerColor_gt: String

  """All values greater than or equal the given value."""
  markerColor_gte: String

  """All values containing the given string."""
  markerColor_contains: String

  """All values not containing the given string."""
  markerColor_not_contains: String

  """All values starting with the given string."""
  markerColor_starts_with: String

  """All values not starting with the given string."""
  markerColor_not_starts_with: String

  """All values ending with the given string."""
  markerColor_ends_with: String

  """All values not ending with the given string."""
  markerColor_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
  shapes_every: ShapeWhereInput
  shapes_some: ShapeWhereInput
  shapes_none: ShapeWhereInput
  user: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  markers(where: MarkerWhereInput, orderBy: MarkerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Marker]!
  shapes(where: ShapeWhereInput, orderBy: ShapeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shape]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  geoLocations(where: GeoLocationWhereInput, orderBy: GeoLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoLocation]!
  user(where: UserWhereUniqueInput!): User
  project(where: ProjectWhereUniqueInput!): Project
  marker(where: MarkerWhereUniqueInput!): Marker
  shape(where: ShapeWhereUniqueInput!): Shape
  location(where: LocationWhereUniqueInput!): Location
  geoLocation(where: GeoLocationWhereUniqueInput!): GeoLocation
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  markersConnection(where: MarkerWhereInput, orderBy: MarkerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MarkerConnection!
  shapesConnection(where: ShapeWhereInput, orderBy: ShapeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShapeConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  geoLocationsConnection(where: GeoLocationWhereInput, orderBy: GeoLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoLocationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Shape implements Node {
  id: ID!
  geojson: String!
  user: String
}

"""A connection to a list of items."""
type ShapeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShapeEdge]!
  aggregate: AggregateShape!
}

input ShapeCreateInput {
  id: ID
  geojson: String!
  user: String
}

input ShapeCreateManyInput {
  create: [ShapeCreateInput!]
  connect: [ShapeWhereUniqueInput!]
}

"""An edge in a connection."""
type ShapeEdge {
  """The item at the end of the edge."""
  node: Shape!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ShapeOrderByInput {
  id_ASC
  id_DESC
  geojson_ASC
  geojson_DESC
  user_ASC
  user_DESC
}

type ShapePreviousValues {
  id: ID!
  geojson: String!
  user: String
}

input ShapeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ShapeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShapeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShapeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  geojson: String

  """All values that are not equal to given value."""
  geojson_not: String

  """All values that are contained in given list."""
  geojson_in: [String!]

  """All values that are not contained in given list."""
  geojson_not_in: [String!]

  """All values less than the given value."""
  geojson_lt: String

  """All values less than or equal the given value."""
  geojson_lte: String

  """All values greater than the given value."""
  geojson_gt: String

  """All values greater than or equal the given value."""
  geojson_gte: String

  """All values containing the given string."""
  geojson_contains: String

  """All values not containing the given string."""
  geojson_not_contains: String

  """All values starting with the given string."""
  geojson_starts_with: String

  """All values not starting with the given string."""
  geojson_not_starts_with: String

  """All values ending with the given string."""
  geojson_ends_with: String

  """All values not ending with the given string."""
  geojson_not_ends_with: String
  user: String

  """All values that are not equal to given value."""
  user_not: String

  """All values that are contained in given list."""
  user_in: [String!]

  """All values that are not contained in given list."""
  user_not_in: [String!]

  """All values less than the given value."""
  user_lt: String

  """All values less than or equal the given value."""
  user_lte: String

  """All values greater than the given value."""
  user_gt: String

  """All values greater than or equal the given value."""
  user_gte: String

  """All values containing the given string."""
  user_contains: String

  """All values not containing the given string."""
  user_not_contains: String

  """All values starting with the given string."""
  user_starts_with: String

  """All values not starting with the given string."""
  user_not_starts_with: String

  """All values ending with the given string."""
  user_ends_with: String

  """All values not ending with the given string."""
  user_not_ends_with: String
}

type ShapeSubscriptionPayload {
  mutation: MutationType!
  node: Shape
  updatedFields: [String!]
  previousValues: ShapePreviousValues
}

input ShapeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ShapeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShapeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShapeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ShapeWhereInput
}

input ShapeUpdateDataInput {
  geojson: String
  user: String
}

input ShapeUpdateInput {
  geojson: String
  user: String
}

input ShapeUpdateManyDataInput {
  geojson: String
  user: String
}

input ShapeUpdateManyInput {
  create: [ShapeCreateInput!]
  connect: [ShapeWhereUniqueInput!]
  set: [ShapeWhereUniqueInput!]
  disconnect: [ShapeWhereUniqueInput!]
  delete: [ShapeWhereUniqueInput!]
  update: [ShapeUpdateWithWhereUniqueNestedInput!]
  updateMany: [ShapeUpdateManyWithWhereNestedInput!]
  deleteMany: [ShapeScalarWhereInput!]
  upsert: [ShapeUpsertWithWhereUniqueNestedInput!]
}

input ShapeUpdateManyMutationInput {
  geojson: String
  user: String
}

input ShapeUpdateManyWithWhereNestedInput {
  where: ShapeScalarWhereInput!
  data: ShapeUpdateManyDataInput!
}

input ShapeUpdateWithWhereUniqueNestedInput {
  where: ShapeWhereUniqueInput!
  data: ShapeUpdateDataInput!
}

input ShapeUpsertWithWhereUniqueNestedInput {
  where: ShapeWhereUniqueInput!
  update: ShapeUpdateDataInput!
  create: ShapeCreateInput!
}

input ShapeWhereInput {
  """Logical AND on all given filters."""
  AND: [ShapeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ShapeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ShapeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  geojson: String

  """All values that are not equal to given value."""
  geojson_not: String

  """All values that are contained in given list."""
  geojson_in: [String!]

  """All values that are not contained in given list."""
  geojson_not_in: [String!]

  """All values less than the given value."""
  geojson_lt: String

  """All values less than or equal the given value."""
  geojson_lte: String

  """All values greater than the given value."""
  geojson_gt: String

  """All values greater than or equal the given value."""
  geojson_gte: String

  """All values containing the given string."""
  geojson_contains: String

  """All values not containing the given string."""
  geojson_not_contains: String

  """All values starting with the given string."""
  geojson_starts_with: String

  """All values not starting with the given string."""
  geojson_not_starts_with: String

  """All values ending with the given string."""
  geojson_ends_with: String

  """All values not ending with the given string."""
  geojson_not_ends_with: String
  user: String

  """All values that are not equal to given value."""
  user_not: String

  """All values that are contained in given list."""
  user_in: [String!]

  """All values that are not contained in given list."""
  user_not_in: [String!]

  """All values less than the given value."""
  user_lt: String

  """All values less than or equal the given value."""
  user_lte: String

  """All values greater than the given value."""
  user_gt: String

  """All values greater than or equal the given value."""
  user_gte: String

  """All values containing the given string."""
  user_contains: String

  """All values not containing the given string."""
  user_not_contains: String

  """All values starting with the given string."""
  user_starts_with: String

  """All values not starting with the given string."""
  user_not_starts_with: String

  """All values ending with the given string."""
  user_ends_with: String

  """All values not ending with the given string."""
  user_not_ends_with: String
}

input ShapeWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  marker(where: MarkerSubscriptionWhereInput): MarkerSubscriptionPayload
  shape(where: ShapeSubscriptionWhereInput): ShapeSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  geoLocation(where: GeoLocationSubscriptionWhereInput): GeoLocationSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
  projects: ProjectCreateManyWithoutUserInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutProjectsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: UserCreatepermissionsInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: String
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
  projects: ProjectUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutProjectsDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: String
  permissions: UserUpdatepermissionsInput
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
